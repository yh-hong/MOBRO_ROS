#!/usr/bin/env python

import sys
import rospy
from nav_msgs.msg import OccupancyGrid
from subprocess import check_output
from threading import Thread

class MapKeeper:
    def __init__(self, map_args):
        self.map_args = map_args
        self.sub = rospy.Subscriber('/map', OccupancyGrid, self.map_cb)
        self.pub = rospy.Publisher('/map',OccupancyGrid)
        self.map = OccupancyGrid()
        
    def map_cb(self, msg):
        # check if cartographer mapping still running
        nodes = check_output(('rosnode','list')).splitlines()
        if '/cartographer_node' not in nodes and '/cartographer_offline_node' not in nodes:
            self.saving_thread = Thread(target = self.save_map)
            self.saving_thread.start()
            self.sub.unregister()
        else:           
            self.map = msg
            print('Receiving map...')
                
    def map_is_saved(self):
        if self.sub.callback:
            return False
        
        # not yet written, republish last map        
        self.pub.publish(self.map)
        
        return not self.saving_thread.isAlive()
                
    def save_map(self):
        print('Saving map...')
        out = check_output(('rosrun map_server map_saver ' + self.map_args).split())
        

if __name__ == "__main__":
    
    rospy.init_node('map_saver_trigger')
    
    #map_args = sys.argv[1]
    map_args = '--occ 65 --free 2 -f /home/olivier/code/ros/src/ecn/mobro/maps/house'
    
    listener = MapKeeper(map_args)
    save_running = False
    
    while not rospy.is_shutdown():
        
        if listener.map_is_saved():
            print('Map saved')
            break
            
        rospy.sleep(1.)
    
